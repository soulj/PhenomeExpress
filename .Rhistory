length(transcriptCoordsByGene.GRangesList.fly)
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.fly),flyEGs_comp))
index
transcriptCoordsByGene.GRangesList.fly=transcriptCoordsByGene.GRangesList.fly[index]
length(transcriptCoordsByGene.GRangesList.fly)
transcriptCoordsByGene.GRangesList.rat <-transcriptsBy (TxDb.Rnorvegicus.UCSC.rn5.refGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.rat),ratEGs_comp))
transcriptCoordsByGene.GRangesList.rat=transcriptCoordsByGene.GRangesList.rat[index]
promoter.seqs.rat <- getPromoterSeq (transcriptCoordsByGene.GRangesList.rat,Rnorvegicus)
promoter.seqs.rat.unlist=unlist(promoter.seqs.rat)
promoter.seqs.rat.unlist
promoter.seqs.unlist
promoter.seq.unlist
promoter.seqs.mouse.unlist
promoter.seqs.mouse.unlist
transcriptCoordsByGene.GRangesList.fly <-transcriptsBy (TxDb.Dmelanogaster.UCSC.dm3.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.fly),flyEGs_comp))
transcriptCoordsByGene.GRangesList.fly=transcriptCoordsByGene.GRangesList.fly[index]
transcriptCoordsByGene.GRangesList.fly
eg2ens <- org.Dm.egENSEMBL[flyEGs_comp]
str(flyEGs_comp)
flyEGs_comp=c()
for( i in 1:length(humanIDs)){
flyEGs<-inpIDMapper(humanIDs[[i]], srcSpecies="HOMSA", destSpecies="DROME", srcIDType="EG", destIDType="EG")
flyEGs_comp=c(flyEGs_comp,flyEGs)
}
transcriptCoordsByGene.GRangesList.fly <-transcriptsBy (TxDb.Dmelanogaster.UCSC.dm3.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.fly),flyEGs_comp))
transcriptCoordsByGene.GRangesList.fly=transcriptCoordsByGene.GRangesList.fly[index]
transcriptCoordsByGene.GRangesList.fly
eg2ens <- org.Dm.egENSEMBL[flyEGs_comp]
eg2ens <- org.Dm.egENSEMBL[unlist(flyEGs_comp)]
eg2ens
toTable(eg2ens)
transcriptCoordsByGene.GRangesList.fly <-transcriptsBy (TxDb.Dmelanogaster.UCSC.dm3.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.fly),eg2ens))
transcriptCoordsByGene.GRangesList.fly=transcriptCoordsByGene.GRangesList.fly[index]
transcriptCoordsByGene.GRangesList.fly <-transcriptsBy (TxDb.Dmelanogaster.UCSC.dm3.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.fly),toTable(eg2ens)[,2])
transcriptCoordsByGene.GRangesList.fly=transcriptCoordsByGene.GRangesList.fly[index]
transcriptCoordsByGene.GRangesList.fly <-transcriptsBy (TxDb.Dmelanogaster.UCSC.dm3.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.fly),toTable(eg2ens)[,2]))
transcriptCoordsByGene.GRangesList.fly=transcriptCoordsByGene.GRangesList.fly[index]
transcriptCoordsByGene.GRangesList.fly
length( transcriptCoordsByGene.GRangesList.fly)
promoter.seqs.fly <- getPromoterSeq (transcriptCoordsByGene.GRangesList.fly,Dmelanogaster)
promoter.seqs.fly.unlist=unlist(promoter.seqs.fly)
length( promoter.seqs.fly.unlist)
length(flyEGs_comp)
biocLite("BSgenome.Btaurus.UCSC.bosTau4")
biocLite("BSgenome.Cfamiliaris.UCSC.canFam3")
biocLite("BSgenome.Drerio.UCSC.danRer7",ask=F)
biocLite("BSgenome.Ggallus.UCSC.galGal4",ask=F)
biocLite("org.dr.eg.db")
biocLite("org.Dr.eg.db")
biocLite("org.Gg.eg.db")
biocLite("hom.Dr.inp.db")
biocLite("hom.Gg.inp.db")
10000*10000
n=10000
n(n - 1) / 2
(n*n - n) / 2
samplefile<-  system.file("extdata" ,"~/Genomes/zebrafish)ensGene.sql",package ="GenomicFeatures")
samplefile
samplefile<-  system.file("extdata" ,"~/Genomes/zebrafishensGene.sql",package ="GenomicFeatures")
samplefile
?system.file
library(
samplefile<-  system.file("extdata" ,"~/Genomes/zebrafish)ensGene.sql",package ="GenomicFeatures"))
library("GenomicFeatures")
samplefile<-  system.file("extdata" ,"~/Genomes/zebrafishensGene.sql",package ="GenomicFeatures")
samplefile
samplefile<-  system.file("~/Genomes/zebrafishensGene.sql",package ="GenomicFeatures")
samplefile
samplefile<-  system.file("~/Genomes/zebrafishensGene.sql",package ="GenomicFeatures")
samplefile<-  system.file("~/Genomes/zebrafishensGene.sql")
samplefile
samplefile<-  system.file("~/Genomes/zebrafishensGene.sql")
txdb<-  loadDb("~/Genomes/zebrafishensGene.sql")
txdb<-  loadDb("~/Genomes/ensGene.txt")
samplefile<-  system.file("~/Genomes/danRer7.sqlite",package ="GenomicFeatures")
samplefile
txdb<-  loadDb("~/Genomes/ensGe.txt")
txdb<-  loadDb("~/Genomes/danRer7.sqlite")
?loadDb
samplefile<-  system.file("~/Genomes/danRer7.sql",package ="GenomicFeatures")
samplefile
loadDb(file="~/Genomes/danRer7.sql")
transcrptsBy
transcriptsBy
?transcriptsBy
makeTranscriptDbFromUCSC(genome="danRer7",tablename="knownGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
supportedUCSCtables()
makeTranscriptDbFromUCSC(genome="danRer7",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
TxDb.Drerio.UCSC.danRer7.ensGene=makeTranscriptDbFromUCSC(genome="danRer7",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
DrerioEGs_comp=c()
for( i in 1:length(humanIDs)){
DrerioEGs<-inpIDMapper(humanIDs[[i]], srcSpecies="HOMSA", destSpecies="DANRE", srcIDType="EG", destIDType="EG")
DrerioEGs_comp=c(DrerioEGs_comp,DrerioEGs)
}
legnth( DrerioEGs_comp)
length( DrerioEGs_comp)
length(humanIDs)
humanIDs
length(humanIDs)
humanIDs
str(humanIDs)
DrerioEGs<-inpIDMapper(humanIDs[[1]], srcSpecies="HOMSA", destSpecies="DANRE", srcIDType="EG", destIDType="EG")
DrerioEGs
DANRE
library("hom.Dr.inp.db")
DrerioEGs<-inpIDMapper(humanIDs[[1]], srcSpecies="HOMSA", destSpecies="DANRE", srcIDType="EG", destIDType="EG")
DrerioEGs
hom.Dr.inpHOMSA
?hom.Dr.inpHOMSA
DrerioEGs<-inpIDMapper(humanIDs[[1]], srcSpecies="HOMSA", destSpecies="DANRE", srcIDType="EG")
DrerioEGs
humanProtIds <- mget(humanEGs,org.Hs.egENSEMBLPROT)
humanProtIds <- mget(humanIDs,org.Hs.egENSEMBLPROT)
table(is.na(humanIDs))
humanProtIds <- mget(names(transcriptCoordsByGene.GRangesList),org.Hs.egENSEMBLPROT)
humanProtIds <- mget(names(transcriptCoordsByGene.GRangesList),org.Hs.egENSEMBLPROT,ifnotfound=NA)
length(humanProtIds)
length(names(transcriptCoordsByGene.GRangesList))
table(is.na(humanProtIds))
humanProtIds=na.omit(humanProtIds)
humanProtIds=split(humanProtIds, ceiling(seq_along(humanProtIds)/1000))
DrerioEGs<-inpIDMapper(humanIDs[[1]], srcSpecies="HOMSA", destSpecies="DANRE")
DrerioEGs<-inpIDMapper(humanIDs[[1]], srcSpecies="HOMSA", destSpecies="DANRE",srcIDType="EG", destIDType="ENS")
DrerioEGs<-inpIDMapper(humanIDs[[1]], srcSpecies="HOMSA", destSpecies="DANRE",srcIDType="EG", destIDType="ENSEMBL")
DrerioEGs
DrerioEGs<-inpIDMapper(humanProtIds[[1]], srcSpecies="HOMSA", destSpecies="DANRE",srcIDType="ENSEMBLPROT", destIDType="ENSEMBL")
DrerioEGs
DrerioEGs<-inpIDMapper(humanProtIds[[1]], srcSpecies="HOMSA", destSpecies="DANRE",srcIDType="ENSEMBLPROT", destIDType="ENSEMBLPROT")
DrerioEGs
head((humanProtIds))
?inpIDMapper
head(humanIDs)
inpIDMapper(c("1844"  , "1845"  , "1846" ,  "1847",   "1848"  , "1849"   ,"185"), srcSpecies="HOMSA", destSpecies="DANRE", srcIDType="EG", destIDType="EG")
inpIDMapper(srcSpecies="HOMSA", destSpecies="DARE", srcIDType="EG", destIDType="EG")
hom.Hs.inpDANRE
?hom.Hs.inpDANRE
x=hom.Hs.inpDANRE
mapped_IDs <- mappedkeys(x)
head(mapped_IDs)
humanProtIds
humanProtIds <- mget(names(transcriptCoordsByGene.GRangesList),org.Hs.egENSEMBLPROT,ifnotfound=NA)
humanProtIds=na.omit(humanProtIds)
rawDANREProtIds <- mget(unlist(humanProtIds),hom.Hs.inpDANRE,ifnotfound=NA)
humanProtIds
rawDANREProtIds <- mget(na.omit(unlist(humanProtIds)),hom.Hs.inpDANRE,ifnotfound=NA)
head(rawDANREProtIds)
rawDANREProtIds=na.omit(rawDANREProtIds)
length(rawDANREProtIds)
rawDANREProtIds=rawDANREProtIds[!is.na(rawDANREProtIds)]
length(rawDANREProtIds)
head(rawDANREProtIds)
DrerioEGs<-inpIDMapper(humanIDs[[5]], srcSpecies="HOMSA", destSpecies="DANRE", srcIDType="EG", destIDType="EG")
DrerioEGs
inpIDMapper
org.Dr.egGENENAME
?org.Dr.egGENENAME
DrerioEGs<-inpIDMapper(humanIDs[[1]], srcSpecies="HOMSA", destSpecies="DANRE", srcIDType="EG", destIDType="GENENAME")
DrerioEGs
DrerioEGs<-inpIDMapper(humanIDs[[1]], srcSpecies="HOMSA", destSpecies="DANRE", srcIDType="EG", destIDType="GENENAM")
(humanIDs[[1]]
)
rawDANREProtIds=na.omit(rawDANREProtIds)
head(> rawDANREProtIds)
head(rawDANREProtIds)
human]
head(humanProtIds)
head(rawDANREProtIds)
transcriptCoordsByGene.GRangesList.sebrafish <-transcriptsBy (TxDb.Drerio.UCSC.danRer7.ensGene, by = "gene")
transcriptCoordsByGene.GRangesList
transcriptCoordsByGene.GRangesList.sebrafish
head(rawDANREProtIds)
org.Dr.egENSEMBLPROT2EG
DANREENSEMBLGeneIDs=mget(na.omit(unlist(rawDANREProtIds)),org.Dr.egENSEMBLPROT2EG,ifnotfound=NA)
DANREENSEMBLGeneIDs
DANREENSEMBLGeneIDs=DANREENSEMBLGeneIDs[!is.na(DANREENSEMBLGeneIDs)]
length(DANREENSEMBLGeneIDs)
length(DANREENSEMBLGeneIDs)
length(rawDANREProtIds)
DANREENSEMBLGeneIDs
length(humanProtIds=)
length(humanProtIds)
head(humanEGs)
head(humanProtIds)
tail(humanProtIds)
humanProtIds=humanProtIds[!is.na(humanProtIds)]
length(humanProtIds)
rawDANREProtIds <- mget(na.omit(unlist(humanProtIds)),hom.Hs.inpDANRE,ifnotfound=NA)
rawDANREProtIds=rawDANREProtIds[!is.na(rawDANREProtIds)]
head(rawDANREProtIds)
length(rawDANREProtIds)
library(biomaRt)
head(listMarts())
head(listDatasets(useMart("ensembl")))
grep("danio",listDatasets(useMart("ensembl")),ignore.case=T,value=T)
grep("Drerio",listDatasets(useMart("ensembl")),ignore.case=T,value=T)
grep("Drerio_gene",listDatasets(useMart("ensembl")),ignore.case=T,value=T)
ensembl <- useMart("ensembl", dataset="drerio_gene_ensembl")
head(rawDANREProtIds)
res <- getBM(attributes = c("ensembl_prot_id","ensembl_gene_id"),filters ="ensembl_prot_id" ,values = unlist(rawDANREProtIds),mart = ensembl)
listAttributes(ensembl)
res <- getBM(attributes = c("ensembl_peptide_id","ensembl_gene_id"),filters ="ensembl_peptide_id" ,values = unlist(rawDANREProtIds),mart = ensembl)
res
res
length(rawDANREProtIds)
head(rawDANREProtIds)
tail(rawDANREProtIds)
res2 <- getBM(attributes = c("ensembl_peptide_id","ensembl_gene_id"),filters ="ensembl_peptide_id" ,values = unlist(rawDANREProtIds),mart = ensembl)
length(res2)
dim(res2)
dim(res)
head(res)
transcriptCoordsByGene.GRangesList.zebrafish <-transcriptsBy (TxDb.Drerio.UCSC.danRer7.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.fly),res[,2]))
transcriptCoordsByGene.GRangesList.zebrafish=transcriptCoordsByGene.GRangesList.zebrafish[index]
length(transcriptCoordsByGene.GRangesList.zebrafish)
transcriptCoordsByGene.GRangesList.zebrafish <-transcriptsBy (TxDb.Drerio.UCSC.danRer7.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.zebrafish),res[,2]))
transcriptCoordsByGene.GRangesList.zebrafish=transcriptCoordsByGene.GRangesList.zebrafish[index]
length(transcriptCoordsByGene.GRangesList.zebrafish)
promoter.seqs.zebrafish <- getPromoterSeq (transcriptCoordsByGene.GRangesList.zebrafish,Drerio)
promoter.seqs.zebrafish.unlist=unlist(promoter.seqs.zebrafish)
library("BSgenome.Drerio.UCSC.danRer7")
promoter.seqs.zebrafish <- getPromoterSeq (transcriptCoordsByGene.GRangesList.zebrafish,Drerio)
promoter.seqs.zebrafish.unlist=unlist(promoter.seqs.zebrafish)
promoter.seqs.zebrafish.unlist
length(promoter.seqs.zebrafish.unlist)
library("BSgenome.Ggallus.UCSC.galGal4")
TxDb.Ggallus.UCSC.galGal4.ensGene=makeTranscriptDbFromUCSC(genome="galGal4",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
flyEGs11<-inpIDMapper(humanIDs[[i]], srcSpecies="HOMSA", destSpecies="GALGA", srcIDType="EG", destIDType="EG")
library("BSgenome..UCSC.galGal4")
library("BSgenome.UCSC.galGal4")
biocLite("BSgenome.Ggallus.UCSC.galGal4")
flyEGs11<-inpIDMapper(humanIDs[[i]], srcSpecies="HOMSA", destSpecies="GALGA", srcIDType="EG", destIDType="EG")
library("BSgenome.UCSC.galGal4")
library("BSgenome.Ggallus.UCSC.galGal4")
flyEGs11<-inpIDMapper(humanIDs[[i]], srcSpecies="HOMSA", destSpecies="GALGA", srcIDType="EG", destIDType="EG")
inpIDMapper
rawGALLUSProtIds <- mget(humanIDs),hom.Hs.inpGALGA,ifnotfound=NA)
rawGALLUSProtIds <- mget(unlist(humanIDs),hom.Hs.inpGALGA,ifnotfound=NA)
rawGALLUSProtIds
table(is.na(rawGALLUSProtIds))
hom.Hs.inpGALGA
mapped_genes <- mappedkeys( hom.Hs.inpGALGA)
head(mapped_genes)
ensembl <- useMart("ensembl", dataset="hsapien_gene_ensembl")
bob=listAttributes(ensembl)
ensembl <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
bob=listAttributes(ensembl)
grep('orthologs',bob$name,ignore.case=T,values=T)
grep('orthologs',bob$name,ignore.case=T,value=T)
grep('ortholog',bob$name,ignore.case=T,value=T)
grep('orth,bob$name,ignore.case=T,value=T)
grep('orth,bob$name,ignore.case=T,value=T)
grep('orth',bob$name,ignore.case=T,value=T)
grep('zebra',bob$name,ignore.case=T,value=T)
grep('drerio',bob$name,ignore.case=T,value=T)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
transcriptCoordsByGene.GRangesList <-transcriptsBy (TxDb.Hsapiens.UCSC.hg19.knownGene, by = "gene")
humanIDs=split(names(transcriptCoordsByGene.GRangesList), ceiling(seq_along(names(transcriptCoordsByGene.GRangesList))/1000))
grep('musc',bob$name,ignore.case=T,value=T)
res <- getBM(attributes = c("entrezgene","mmusculus_homolog_ensembl_gene","mmusculus_homolog_orthology_type"),filters ="entrezgene" ,values = unlist(humanIDs),mart = ensembl)
eg2ens <- org.Dm.egENSEMBL[unlist(humanIDs)]
eg2ens <- org.Hs.egENSEMBL[unlist(humanIDs)]
eg2ens <- mget(unlist(humanIDs),org.Hs.egENSEMBL,ifnotfound=NA)
length(eg2ens)
eg2ens=eg2ens[!is.na(eg2ens)]
length(eg2ens)
res <- getBM(attributes = c("ensembl_gene","mmusculus_homolog_ensembl_gene","mmusculus_homolog_orthology_type"),filters ="entrezgene" ,values = unlist(eg2ens),mart = ensembl)
res <- getBM(attributes = c("ensembl_gene_id","mmusculus_homolog_ensembl_gene","mmusculus_homolog_orthology_type"),filters ="entrezgene" ,values = unlist(eg2ens),mart = ensembl)
length(res)
dim(res)
head(eg2ens)
head(res)
res <- getBM(attributes = c("ensembl_gene_id","mmusculus_homolog_ensembl_gene","mmusculus_homolog_orthology_type"),filters ="ensembl_gene_id" ,values = unlist(eg2ens),mart = ensembl)
dim(res)
tail(res)
head9res
head(res)
res=res[res$mmusculus_homolog_ensembl_gene!="",]
res
dim(res)
Mouse.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="mm10",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
transcriptCoordsByGene.GRangesList.mouse <-transcriptsBy (Mouse.TxDB.ensGene, by = "gene")
dim(res)
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.mouse),res$mmusculus_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.mouse=transcriptCoordsByGene.GRangesList.mouse[index]
promoter.seqs <- getPromoterSeq (transcriptCoordsByGene.GRangesList.mouse,Mmusculus)
promoter.seqs.mouse.unlist=unlist(promoter.seqs.mouse)
promoter.seqs.mouse <- getPromoterSeq (transcriptCoordsByGene.GRangesList.mouse,Mmusculus)
promoter.seqs.mouse.unlist=unlist(promoter.seqs.mouse)
promoter.seqs.mouse.unlist
writeXStringSet(promoter.seqs.mouse.unlist,filepath="~/Genomes/promoters.mouse.fa")
grep('rattus',bob$name,ignore.case=T,value=T)
grep('rat',bob$name,ignore.case=T,value=T)
grep('norv',bob$name,ignore.case=T,value=T)
res <- getBM(attributes = c("ensembl_gene_id","rnorvegicus_homolog_ensembl_gene","rnorvegicus_homolog_orthology_type"),filters ="ensembl_gene_id" ,values = unlist(eg2ens),mart = ensembl)
res=res[res$rnorvegicus_homolog_ensembl_gene!="",]
dim(res)
head(res)
Rat.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="rn5",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
Rat.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="rn5",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
transcriptCoordsByGene.GRangesList.rat <-transcriptsBy (Rat.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.rat),res$rnorvegicus_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.rat=transcriptCoordsByGene.GRangesList.mouse[index]
promoter.seqs.rat<- getPromoterSeq (transcriptCoordsByGene.GRangesList.rat,Rnorvegicus)
transcriptCoordsByGene.GRangesList.rat <-transcriptsBy (Rat.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.rat),res$rnorvegicus_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.rat=transcriptCoordsByGene.GRangesList.rat[index]
promoter.seqs.rat<- getPromoterSeq (transcriptCoordsByGene.GRangesList.rat,Rnorvegicus)
promoter.seqs.rate.unlist=unlist(promoter.seqs.rat)
length(promoter.seqs.rat.unlist)
writeXStringSet(promoter.seqs.rat.unlist,filepath="~/Genomes/promoters.rat.fa")
promoter.seqs.rat.unlist=unlist(promoter.seqs.rat)
length(promoter.seqs.rat.unlist)
writeXStringSet(promoter.seqs.rat.unlist,filepath="~/Genomes/promoters.rat.fa")
res <- getBM(attributes = c("ensembl_gene_id","dmelanogaster_homolog_ensembl_gene","dmelanogaster_homolog_orthology_type"),filters ="ensembl_gene_id" ,values = unlist(eg2ens),mart = ensembl)
res=res[res$dmelanogaster_homolog_ensembl_gene!="",]
fly.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="dm3",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
transcriptCoordsByGene.GRangesList.fly <-transcriptsBy (fly.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.fly),res$dmelanogaster_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.fly=transcriptCoordsByGene.GRangesList.fly[index]
promoter.seqs.fly<- getPromoterSeq (transcriptCoordsByGene.GRangesList.fly,Dmelanogaster)
promoter.seqs.fly.unlist=unlist(promoter.seqs.fly)
writeXStringSet(promoter.seqs.fly.unlist,filepath="~/Genomes/promoters.fly.fa")
length(promoter.seqs.fly.unlist)
dim(res)
res <- getBM(attributes = c("ensembl_gene_id","drerio_homolog_ensembl_gene","drerio_homolog_orthology_type"),filters ="ensembl_gene_id" ,values = unlist(eg2ens),mart = ensembl)
res=res[res$drerio_homolog_ensembl_gene!="",]
zebrafish.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="dm3",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
transcriptCoordsByGene.GRangesList.zebrafish <-transcriptsBy (zebrafish.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.zebrafish),res$drerio_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.zebrafish=transcriptCoordsByGene.GRangesList.zebrafish[index]
promoter.seqs.zebrafish<- getPromoterSeq (transcriptCoordsByGene.GRangesList.zebrafish,Drerio)
promoter.seqs.zebrafish.unlist=unlist(promoter.seqs.zebrafish)
writeXStringSet(promoter.seqs.zebrafish.unlist,filepath="~/Genomes/promoters.zebrafish.fa")
dim(res)
res <- getBM(attributes = c("ensembl_gene_id","drerio_homolog_ensembl_gene","drerio_homolog_orthology_type"),filters ="ensembl_gene_id" ,values = unlist(eg2ens),mart = ensembl)
dim(res)
zebrafish.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="danRer7",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
transcriptCoordsByGene.GRangesList.zebrafish <-transcriptsBy (zebrafish.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.zebrafish),res$drerio_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.zebrafish=transcriptCoordsByGene.GRangesList.zebrafish[index]
promoter.seqs.zebrafish<- getPromoterSeq (transcriptCoordsByGene.GRangesList.zebrafish,Drerio)
promoter.seqs.zebrafish.unlist=unlist(promoter.seqs.zebrafish)
writeXStringSet(promoter.seqs.zebrafish.unlist,filepath="~/Genomes/promoters.zebrafish.fa")
warnings(0)
warnings()
length(transcriptCoordsByGene.GRangesList.zebrafish)
transcriptCoordsByGene.GRangesList.zebrafish
str(transcriptCoordsByGene.GRangesList.zebrafish)
res <- getBM(attributes = c("ensembl_gene_id","ggallus_homolog_ensembl_gene","ggallus_homolog_orthology_type"),filters ="ensembl_gene_id" ,values = unlist(eg2ens),mart = ensembl)
res=res[res$ggallus_homolog_ensembl_gene!="",]
chicken.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="galGal4",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
transcriptCoordsByGene.GRangesList.chicken <-transcriptsBy (chicken.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.chicken),res$ggallus_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.chicken=transcriptCoordsByGene.GRangesList.chicken[index]
promoter.seqs.chicken<- getPromoterSeq (transcriptCoordsByGene.GRangesList.chicken,Ggallus)
promoter.seqs.chicken.unlist=unlist(promoter.seqs.chicken)
writeXStringSet(promoter.seqs.chicken.unlist,filepath="~/Genomes/promoters.chicken.fa")
dim(results)
dim(res)
res <- getBM(attributes = c("ensembl_gene_id","btaurus_homolog_ensembl_gene","btaurus_homolog_orthology_type"),filters ="ensembl_gene_id" ,values = unlist(eg2ens),mart = ensembl)
res=res[res$btaurus_homolog_ensembl_gene!="",]
cow.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="bosTau4",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
transcriptCoordsByGene.GRangesList.cow <-transcriptsBy (cow.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.cow),res$btaurus_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.cow=transcriptCoordsByGene.GRangesList.cow[index]
promoter.seqs.cow<- getPromoterSeq (transcriptCoordsByGene.GRangesList.cow,btaurus)
promoter.seqs.cow.unlist=unlist(promoter.seqs.cow)
writeXStringSet(promoter.seqs.cow.unlist,filepath="~/Genomes/promoters.cow.fa")
cow.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="bosTau4",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
transcriptCoordsByGene.GRangesList.cow <-transcriptsBy (cow.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.cow),res$btaurus_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.cow=transcriptCoordsByGene.GRangesList.cow[index]
promoter.seqs.cow<- getPromoterSeq (transcriptCoordsByGene.GRangesList.cow,btaurus)
promoter.seqs.cow.unlist=unlist(promoter.seqs.cow)
writeXStringSet(promoter.seqs.cow.unlist,filepath="~/Genomes/promoters.cow.fa")
promoter.seqs.cow<- getPromoterSeq (transcriptCoordsByGene.GRangesList.cow,Btaurus)
promoter.seqs.cow.unlist=unlist(promoter.seqs.cow)
writeXStringSet(promoter.seqs.cow.unlist,filepath="~/Genomes/promoters.cow.fa")
library("BSgenome.Btaurus.UCSC.bosTau4")
promoter.seqs.cow<- getPromoterSeq (transcriptCoordsByGene.GRangesList.cow,Btaurus)
promoter.seqs.cow.unlist=unlist(promoter.seqs.cow)
writeXStringSet(promoter.seqs.cow.unlist,filepath="~/Genomes/promoters.cow.fa")
dim(res)
BSgenome.Btaurus.UCSC.bosTau4
class(BSgenome)
class(BSgenome.Btaurus.UCSC.bosTau4)
?BSgenomeForge
vignette("
BSgenomeForge")
vignette("BSgenomeForge")
biocLite("BSgenome.Cfamiliaris.UCSC.canFam2")
biocLite("BSgenome.Ptroglodytes.UCSC.panTro2")
res <- getBM(attributes = c("ensembl_gene_id","cfamiliaris_homolog_ensembl_gene","cfamiliaris_homolog_orthology_type"),filters ="ensembl_gene_id" ,values = unlist(eg2ens),mart = ensembl)
res=res[res$cfamiliaris_homolog_ensembl_gene!="",]
dog.TxDB.ensGene=makeTranscriptDbFromUCSC(genome="canFam2",tablename="ensGene", transcript_ids=NULL, circ_seqs=DEFAULT_CIRC_SEQS, url="http://genome.ucsc.edu/cgi-bin/",goldenPath_url="http://hgdownload.cse.ucsc.edu/goldenPath", miRBaseBuild=NA)
transcriptCoordsByGene.GRangesList.dog <-transcriptsBy (dog.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.dog),res$cfamiliaris_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.dog=transcriptCoordsByGene.GRangesList.dog[index]
promoter.seqs.dog<- getPromoterSeq (transcriptCoordsByGene.GRangesList.dog,Cfamiliaris)
promoter.seqs.dog.unlist=unlist(promoter.seqs.dog)
writeXStringSet(promoter.seqs.dog.unlist,filepath="~/Genomes/promoters.dog.fa")
library("BSgenome.Cfamiliaris.UCSC.canFam2")
transcriptCoordsByGene.GRangesList.dog <-transcriptsBy (dog.TxDB.ensGene, by = "gene")
index=na.omit(match(names(transcriptCoordsByGene.GRangesList.dog),res$cfamiliaris_homolog_ensembl_gene))
transcriptCoordsByGene.GRangesList.dog=transcriptCoordsByGene.GRangesList.dog[index]
promoter.seqs.dog<- getPromoterSeq (transcriptCoordsByGene.GRangesList.dog,Cfamiliaris)
promoter.seqs.dog.unlist=unlist(promoter.seqs.dog)
writeXStringSet(promoter.seqs.dog.unlist,filepath="~/Genomes/promoters.dog.fa")
length(promoter.seqs.dog)
sis of GSE52870 PAX5 dataset with PhenomeExpress
#takes around 15 mins to run
require("Matrix")
require("igraph")
require("data.table")
require("DESeq2") # for the RNA-seq analysis
require("BioNet") # for comparison purposes - not needed by PhenomeExpress
require("VennDiagram") # for making the Venn diagram figures
require("RCytoscape") # also requires cytoscape v2.8 to be open with the Cytoscape RPC plugin active
setwd("~/PhenomeExpress")
#source the methods
source("./src/HeterogeneousNetwork.R")
source("./src/RHWN.R")
source("./src/runGIGA.R")
source("./src/runPhenoExpress.R")
#calculate the FPKM using the effective gene length and the counts per gene
GSE52870_Pax5Restoration.GenewiseCounts <- read.delim("./GSE52870/GSE52870_Pax5Restoration-GenewiseCounts.txt")
countmatrix=GSE52870_Pax5Restoration.GenewiseCounts[,3:8]
rownames(countmatrix)=GSE52870_Pax5Restoration.GenewiseCounts$EntrezID
genelength=GSE52870_Pax5Restoration.GenewiseCounts$GeneLength
FPKMtable=(countmatrix * 10^9) /(colSums(countmatrix) * genelength)
FPKMtable=ifelse(FPKMtable>1,1,0)
countmatrix=countmatrix[Matrix::rowSums(FPKMtable)>2,]
#use DESeq2 to analyse the raw data
colData=data.frame(colnames=colnames(countmatrix),condition=c(rep("PAX5KD",3),rep("PAX5Rescue",3)))
dds=DESeqDataSetFromMatrix(countData=countmatrix,colData=colData,design=~condition)
dds$condition=factor(dds$condition, levels =c ( "PAX5KD","PAX5Rescue" ))
dds2=DESeq(dds)
#get the expression table with the fold changes and p values
res=results(dds2)
dt=as.data.frame(res[order (res$log2FoldChange),])
dt$EntrezID=rownames(dt)
#Anotate the genes with SwissProt names to match the network node names
Young_EnteztoSwiss_via_Uniprot <- read.delim("./GSE52870/GenenamesEntreztoUniprot_via_UniProt.txt")
Young_EnteztoSwiss_via_David <- read.delim("./GSE52870/GenenamesEntreztoUniprot_via_David.txt", dec=",")
Young_EnteztoSwiss_via_David=Young_EnteztoSwiss_via_David[,1:2]
Young_EnteztoSwiss=rbind(Young_EnteztoSwiss_via_David,Young_EnteztoSwiss_via_Uniprot)
Young_EnteztoSwiss=Young_EnteztoSwiss[!duplicated(Young_EnteztoSwiss),]
#note 1 entrez gene maps to more than one protein
dt=merge(dt,Young_EnteztoSwiss,by.x="EntrezID",by.y="From")
dt=na.omit(dt)
colnames(dt)[8]="name"
#load the high confidence mouse PPI network from STRING
load("./Networks/HCString_Mouse_Graph.RData")
presentList=na.omit(match(dt$name,V(HCString_Mouse)$name))
#Use pre-existing networks filter based on genes found in the transcriptomics experiment
pax5.network=induced.subgraph(HCString_Mouse,presentList)
pax5.network=decompose.graph(pax5.network)[[1]]
presentList=na.omit(match(V(pax5.network)$name,dt$name))
#filter the expression data based on proteins present in the network
dt=dt[presentList,]
dt=na.omit(dt)
#calculate the Pi value for use in the node scoring stage
dt$Pi=abs(dt$log2FoldChange)*-log10(dt$padj)
dt$absFC=abs(dt$log2FoldChange)
#select the phenotypes from the UberPheno ontology - the Phenomiser tool and manual searching of the ontolgy by relevent keywords is helpful for this
Phenotypes=c("HP:0004812","MP:0012431","HP:0012191","MP:0008211","MP:0008189")
#run Phenome Express
LeukResults=runPhenomeExpress(pax5.network,dt,Phenotypes,"Mouse")
#retrieve the significant sub-networks
subnetworks=LeukResults[[1]]
#retrieve the table of p-values
sigTable=LeukResults[[2]]
#collapse all the nodes in the subnetworks from PhenomeExpress
nodes=c()
for(i in 1:length(subnetworks)) {
tempGraph=subnetworks[[i]]
nodes=c(nodes,V(tempGraph)$name)
}
#load the results from JActiveModules and GIGA - run externally, subnetworks >= 5 nodes kept
leukJAM <-read.table("./JActiveModules/leukJM2107", quote="\"")
leukJAM=leukJAM[!duplicated(leukJAM$V1),]
GIGA <- read.delim("./GIGA/leukGIGA.txt", header=F)
#run BioNet for comparison
pval=dt$pvalue
names(pval)=dt$name
b <- fitBumModel(pval, plot = FALSE)
scores <- scoreNodes(network = pax5.network, fb = b,fdr = 1e-25) #FDR produces similar sized module to max sized PhenomeExpress sub-network
module <- runFastHeinz(pax5.network, scores)
#count the number of seed Phenotype annotated proteins present in all the sub-networks for each tool
#First get the gene to phenotype associations for labelling seed nodes
z=getHeterogeneousNetwork(pax5.network,"Mouse")[["genePheno"]] # note contains all proteins - including ones not present in network
phenoAnnotated=z[rownames(z) %in% Phenotypes,]
phenoAnnotated=phenoAnnotated[,colSums(phenoAnnotated)>0]
phenoAnnotated=colnames(phenoAnnotated)
#calculate the number of seed phenotype annotated genes for each tool
no.Seeds.PhenomeExpress=table(ifelse(nodes %in% phenoAnnotated,1,0))
no.Seeds.leukJAM=table(ifelse(leukJAM %in% phenoAnnotated,1,0))
no.Seeds.GIGA=table(ifelse(GIGA$V2 %in% phenoAnnotated,1,0))
no.Seeds.BioNet=table(ifelse(V(module)$name %in% phenoAnnotated,1,0))
#make a Venn diagram of protein in subnetworks from each tool
nodeList=list(PhenomeExpress=nodes,JActivemodules=leukJAM,GIGA=GIGA$V2,BioNet=V(module)$name)
venn.diag=venn.diagram(nodeList,fill = c("red", "green","blue","purple"),alpha = c(0.5, 0.5,0.5,0.5), cex = 2,cat.fontface = 4,lty =2, fontfamily =3,  filename=NULL )
grid.draw(venn.diag)
